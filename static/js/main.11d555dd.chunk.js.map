{"version":3,"sources":["types/Status.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","TodoList","todos","selectedTodoId","setSelectedTodo","handleSelectedTodo","useCallback","todo","className","map","id","completed","title","cn","type","onClick","TodoFilter","status","query","onStatusChange","onQueryChange","value","onChange","e","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","close","useState","user","setUser","error","setError","useEffect","userId","catch","href","email","name","App","isLoading","setIsLoading","selectedTodo","setTodos","setQuery","setStatus","finally","filteredTodos","filter","visibleTodos","useMemo","lowerQuery","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11d555dd.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { useCallback } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId?: number;\n  setSelectedTodo: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  setSelectedTodo,\n}) => {\n  const handleSelectedTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, completed, title } = todo;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={cn({\n                'has-background-info-light': selectedTodoId === id,\n              })}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleSelectedTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    {selectedTodoId === id ? (\n                      <i className=\"far fa-eye-slash\" />\n                    ) : (\n                      <i className=\"far fa-eye\" />\n                    )}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Status } from '../../types/Status';\n\ntype Props = {\n  status: Status,\n  onStatusChange: (status: Status) => void,\n  query: string,\n  onQueryChange: (query: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  status,\n  query,\n  onStatusChange,\n  onQueryChange,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={status}\n          onChange={e => onStatusChange(e.target.value as Status)}\n        >\n          <option value={Status.All}>All</option>\n          <option value={Status.Active}>Active</option>\n          <option value={Status.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={e => onQueryChange(e.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            aria-label=\"close-btn\"\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onQueryChange('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  close: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  close,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(setUser)\n      .catch(() => {\n        setError('Something went wrong while fetching data.');\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n            <button\n              aria-label=\"close-btn\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={close}\n            />\n          </header>\n          <h1>\n            {error}\n          </h1>\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState(Status.All);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .catch(() => {\n        setError('Something went wrong while fetching data.');\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filteredTodos = todos.filter(todo => {\n    switch (status) {\n      case 'all': return todo;\n      case 'active': return !todo.completed;\n      case 'completed': return todo.completed;\n      default: return todo;\n    }\n  });\n\n  const visibleTodos = useMemo(() => {\n    const lowerQuery = query.toLowerCase();\n\n    return filteredTodos.filter(todo => {\n      const isMatchQuery = todo.title.toLowerCase().includes(lowerQuery);\n\n      return isMatchQuery;\n    });\n  }, [todos, query, status]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={setQuery}\n                status={status}\n                onStatusChange={setStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              <h1>\n                {error}\n              </h1>\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  setSelectedTodo={setSelectedTodo}\n                  selectedTodoId={selectedTodo?.id}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          close={() => setSelectedTodo(null)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}